/// <reference types="node" />
import { BatchResultErrorEntry, Message as SQSMessage, SQSServiceException } from '@aws-sdk/client-sqs';
import { S3 } from '@aws-sdk/client-s3';
import { BodyFormat, Squiss } from '.';
import { IMessageAttributes } from './attributeUtils';
import { EventEmitter } from 'events';
import { IS3Upload } from './s3Utils';
import { StrictEventEmitter } from './EventEmitterTypesHelper';
export interface IMessageOpts {
    msg: SQSMessage;
    unwrapSns?: boolean;
    bodyFormat?: BodyFormat;
    squiss: Squiss;
    s3Retriever: () => S3;
    s3Retain: boolean;
}
interface IMessageEvents {
    delQueued: void;
    handled: void;
    released: void;
    timeoutReached: void;
    extendingTimeout: void;
    timeoutExtended: void;
    keep: void;
    delError: BatchResultErrorEntry;
    deleted: string;
    autoExtendFail: SQSServiceException;
    autoExtendError: SQSServiceException;
    s3Download: IS3Upload;
    s3Delete: IS3Upload;
}
type MessageEmitter = StrictEventEmitter<EventEmitter, IMessageEvents>;
declare const Message_base: new () => MessageEmitter;
export declare class Message extends Message_base {
    private static formatMessage;
    raw: SQSMessage;
    body?: string | any;
    subject?: string;
    topicArn?: string;
    topicName?: string;
    attributes: IMessageAttributes;
    sqsAttributes: {
        [k: string]: string;
    };
    private _squiss;
    private _handled;
    private _opts;
    private _deleteCallback?;
    private _s3Retriever;
    private _s3Retain;
    constructor(opts: IMessageOpts);
    parse(): Promise<string | any>;
    isHandled(): boolean;
    del(): Promise<void>;
    keep(): void;
    release(): Promise<void>;
    changeVisibility(timeoutInSeconds: number): Promise<void>;
    private _getBlobMessage;
}
export {};
