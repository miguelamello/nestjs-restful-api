'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMessageAttributes = exports.parseMessageAttributes = void 0;
const ts_type_guards_1 = require("ts-type-guards");
const EMPTY_OBJ = {};
const STRING_TYPE = 'String';
const NUMBER_TYPE = 'Number';
const BINARY_TYPE = 'Binary';
const parseMessageAttributes = (messageAttributes) => {
    const _messageAttributes = messageAttributes || EMPTY_OBJ;
    return Object.keys(_messageAttributes).reduce((parsedAttributes, name) => {
        parsedAttributes[name] = parseAttributeValue(_messageAttributes[name]);
        return parsedAttributes;
    }, {});
};
exports.parseMessageAttributes = parseMessageAttributes;
const parseAttributeValue = (unparsedAttribute) => {
    const type = unparsedAttribute.DataType;
    const stringValue = unparsedAttribute.StringValue;
    const binaryValue = unparsedAttribute.BinaryValue;
    switch (type) {
        case 'Number':
            return Number(stringValue);
        case 'Binary':
            return binaryValue;
        default:
            return stringValue || binaryValue;
    }
};
const createMessageAttributes = (messageAttributes) => {
    const keys = Object.keys(messageAttributes);
    if (keys.length === 0) {
        return;
    }
    return Object.keys(messageAttributes).reduce((parsedAttributes, name) => {
        parsedAttributes[name] = createAttributeValue(messageAttributes[name]);
        return parsedAttributes;
    }, {});
};
exports.createMessageAttributes = createMessageAttributes;
const createAttributeValue = (unparsedAttribute) => {
    if (unparsedAttribute === undefined || unparsedAttribute === null) {
        unparsedAttribute = '';
    }
    if ((0, ts_type_guards_1.isNumber)(unparsedAttribute)) {
        return {
            DataType: NUMBER_TYPE,
            StringValue: String(unparsedAttribute),
        };
    }
    else if ((0, ts_type_guards_1.isString)(unparsedAttribute)) {
        return {
            DataType: STRING_TYPE,
            StringValue: unparsedAttribute,
        };
    }
    else if ((0, ts_type_guards_1.isBoolean)(unparsedAttribute)) {
        return {
            DataType: STRING_TYPE,
            StringValue: `${unparsedAttribute}`,
        };
    }
    else {
        return {
            DataType: BINARY_TYPE,
            BinaryValue: unparsedAttribute,
        };
    }
};
//# sourceMappingURL=attributeUtils.js.map