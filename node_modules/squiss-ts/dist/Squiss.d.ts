import { Message } from './Message';
import { TimeoutExtender } from './TimeoutExtender';
import { IMessageAttributes } from './attributeUtils';
import { SendMessageBatchResult, SQS, SendMessageCommandOutput } from '@aws-sdk/client-sqs';
import { S3 } from '@aws-sdk/client-s3';
import { IMessageToSend, SquissEmitter, ISquissOptions } from './Types';
declare const Squiss_base: new () => SquissEmitter;
export declare class Squiss extends Squiss_base {
    get inFlight(): number;
    get running(): boolean;
    sqs: SQS;
    _timeoutExtender: TimeoutExtender | undefined;
    _opts: ISquissOptions;
    private _s3?;
    private _running;
    private _paused;
    private _inFlight;
    private _queueVisibilityTimeout;
    private _queueMaximumMessageSize;
    private _queueUrl;
    private _delQueue;
    private _delTimer;
    private _activeReq;
    constructor(opts?: ISquissOptions | undefined);
    changeMessageVisibility(msg: Message | string, timeoutInSeconds: number): Promise<void>;
    createQueue(): Promise<string>;
    deleteMessage(msg: Message): Promise<void>;
    deleteQueue(): Promise<void>;
    getQueueUrl(): Promise<string>;
    getQueueVisibilityTimeout(): Promise<number>;
    getQueueMaximumMessageSize(): Promise<number>;
    handledMessage(msg: Message): void;
    releaseMessage(msg: Message): Promise<void>;
    purgeQueue(): Promise<void>;
    sendMessage(message: IMessageToSend, delay?: number, attributes?: IMessageAttributes): Promise<SendMessageCommandOutput>;
    sendMessages(messages: IMessageToSend[] | IMessageToSend, delay?: number, attributes?: IMessageAttributes | IMessageAttributes[]): Promise<SendMessageBatchResult>;
    start(): Promise<void>;
    stop(soft?: boolean, timeout?: number): Promise<boolean>;
    getS3(): S3;
    private _initS3;
    private _initOpts;
    private _deleteMessages;
    private _emitMessages;
    private _getBatch;
    private _initTimeoutExtender;
    private _sendMessageBatch;
    private _slotsAvailable;
    private _startPoller;
    private _deleteXMessages;
    private _isLargeMessage;
    private _prepareMessageParams;
    private _handleLargeMessagePrepare;
    private _prepareMessageRequest;
    private _initSqs;
    private _handleBatchDeleteResults;
    private _prepareMessagesToSend;
    private _handleGetBatchResult;
    private _getMaxMessagesToGet;
}
export {};
