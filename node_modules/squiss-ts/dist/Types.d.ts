/// <reference types="node" />
import { Message } from './Message';
import * as SQS from 'aws-sdk/clients/sqs';
import * as S3 from 'aws-sdk/clients/s3';
import { AWSError } from 'aws-sdk/lib/error';
import { BatchResultErrorEntry } from 'aws-sdk/clients/sqs';
import { IS3Upload } from './s3Utils';
import { StrictEventEmitter } from './EventEmitterTypesHelper';
import { EventEmitter } from 'events';
export interface IMessageDeletedEventPayload {
    msg: Message;
    successId: string;
}
export interface IMessageErrorEventPayload {
    message: Message;
    error: AWSError;
}
export interface IMessageDeleteErrorEventPayload {
    message: Message;
    error: BatchResultErrorEntry;
}
export interface IMessageS3EventPayload {
    message: Message;
    data: IS3Upload;
}
export interface ISendMessageRequest {
    MessageBody: string;
    DelaySeconds?: number;
    MessageAttributes?: SQS.MessageBodyAttributeMap;
    MessageDeduplicationId?: string;
    MessageGroupId?: string;
}
export interface IObject {
    [k: string]: any;
}
export declare type IMessageToSend = IObject | string;
export declare type BodyFormat = 'json' | 'plain' | undefined;
export interface ISquissOptions {
    receiveBatchSize?: number;
    receiveAttributes?: string[];
    receiveSqsAttributes?: string[];
    minReceiveBatchSize?: number;
    receiveWaitTimeSecs?: number;
    deleteBatchSize?: number;
    deleteWaitMs?: number;
    maxInFlight?: number;
    unwrapSns?: boolean;
    bodyFormat?: BodyFormat;
    correctQueueUrl?: boolean;
    pollRetryMs?: number;
    activePollIntervalMs?: number;
    idlePollIntervalMs?: number;
    delaySecs?: number;
    gzip?: boolean;
    minGzipSize?: number;
    maxMessageBytes?: number;
    messageRetentionSecs?: number;
    autoExtendTimeout?: boolean;
    SQS?: SQS | typeof SQS;
    S3?: S3 | typeof S3;
    awsConfig?: SQS.Types.ClientConfiguration;
    queueUrl?: string;
    queueName?: string;
    visibilityTimeoutSecs?: number;
    queuePolicy?: string;
    accountNumber?: string | number;
    noExtensionsAfterSecs?: number;
    advancedCallMs?: number;
    s3Fallback?: boolean;
    s3Bucket?: string;
    s3Retain?: boolean;
    s3Prefix?: string;
    minS3Size?: number;
}
export interface IDeleteQueueItem {
    msg: Message;
    Id: string;
    ReceiptHandle: string;
    resolve: () => void;
    reject: (reason?: any) => void;
}
export interface IDeleteQueueItemById {
    [k: string]: IDeleteQueueItem;
}
export declare const optDefaults: ISquissOptions;
export interface ISquissEvents {
    delQueued: Message;
    handled: Message;
    released: Message;
    timeoutReached: Message;
    extendingTimeout: Message;
    timeoutExtended: Message;
    message: Message;
    keep: Message;
    drained: void;
    queueEmpty: void;
    maxInFlight: void;
    deleted: IMessageDeletedEventPayload;
    gotMessages: number;
    error: Error;
    aborted: AWSError;
    delError: IMessageDeleteErrorEventPayload;
    autoExtendFail: IMessageErrorEventPayload;
    autoExtendError: IMessageErrorEventPayload;
    s3Download: IMessageS3EventPayload;
    s3Delete: IMessageS3EventPayload;
    s3Upload: IS3Upload;
}
export declare type SquissEmitter = StrictEventEmitter<EventEmitter, ISquissEvents>;
