import { Squiss } from './index';
import { Message } from './Message';
import * as LinkedList from 'linked-list';
import { Item } from 'linked-list';
declare class Node extends Item {
    message: Message;
    receivedOn: number;
    timerOn: number;
    constructor(message: Message, receivedOn: number, timerOn: number);
}
export interface ITimeoutExtenderOptions {
    visibilityTimeoutSecs?: number;
    noExtensionsAfterSecs?: number;
    advancedCallMs?: number;
}
interface MessageIndex {
    [k: string]: Node;
}
export declare class TimeoutExtender {
    readonly _index: MessageIndex;
    _linkedList: LinkedList<Node>;
    _opts: ITimeoutExtenderOptions;
    private _squiss;
    private _timer;
    private readonly _visTimeout;
    private readonly _stopAfter;
    private readonly _apiLeadMs;
    constructor(squiss: Squiss, opts?: ITimeoutExtenderOptions);
    addMessage(message: Message): void;
    deleteMessage(message: Message): void;
    _addNode(node: Node): void;
    _deleteNode(node: Node): void;
    _getNodeAge(node: Node): number;
    _headChanged(): boolean;
    _renewNode(node: Node): void;
}
export {};
